#ifndef __GBL__
#define __GBL__

#ifdef __cplusplus
	extern "C" {
#endif

#define CLI					"\n\rPLM> "							// Cli prompt

//#define OSC_INT												// Use internal oscilator
#define F_APB1			24000000							// Sys frequency in Hz
//#define F_APB1				48000000							// Sys frequency in Hz
#define F_DWT				( F_APB1 / 1000000 )
#define FLASH_KEY1			( ( uint32_t ) 0x45670123 )
#define FLASH_KEY2			( ( uint32_t ) 0xCDEF89AB )
#define Page_63				0x0800FC00
#define DWT_CYCCNT			*( volatile uint32_t* ) 0xE0001004
#define DWT_CONTROL			*( volatile uint32_t* ) 0xE0001000
#define SCB_DEMCR			*( volatile uint32_t* ) 0xE000EDFC
//#define ADC1_DR				( ( uint32_t ) 0x4001244C )

//DR_ADDRESS ADC1_DR

#define RX_LEN				64									// Size of buffer UART Rx
#define SPI_LEN				24									// Size of buffer SPI
#if F_APB1 == 48000000
#define ADC_ARRAY_SIZE		100
#else
#define ADC_ARRAY_SIZE		50
#endif

static volatile uint32_t	DeviceType;							// Device type
static volatile uint32_t	Sn;									// Serial number SN
static volatile uint16_t	Noc;								// CAN number
static volatile uint16_t	Speedc;								// CAN speed
static volatile bool		NoAnswer;							// Not answer for broadcast SN

static volatile uint8_t		rx_idx;								// Index in UART recieve buffer
static volatile bool		ret_button;							// Return is pressed
static volatile bool		cli_mode;							// CLI mode
static char					usart_rx_data[RX_LEN];				// recieve buffer data
static char					cli_data[16];						// CLI prompt

static volatile uint32_t	DelayTime;
static volatile uint32_t	CntTime;							// Counter of quants of System Timer
static volatile uint32_t	WD_Time;							// Time of watchdog
static volatile uint32_t	CANDownTime;
static volatile uint16_t	ADC_VALUES[ADC_ARRAY_SIZE];

static volatile uint32_t	SUM;
static volatile uint32_t	min_lvl;
static volatile uint32_t	max_lvl;
static volatile bool		transmit_mode;


static volatile uint32_t	zz;


//static volatile uint32_t	status = 0;

//static volatile uint8_t	spi1_tx_data[SPI_LEN];				// Buffer of Tx SPI1
//static volatile uint8_t	spi1_rx_data[SPI_LEN];				// Buffer of Rx SPI1
//static volatile uint8_t	spi2_tx_data[SPI_LEN];				// Buffer of Tx SPI2
//static volatile uint8_t	spi2_rx_data[SPI_LEN];				// Buffer of Rx SPI2

//static volatile uint8_t	can_id[4];							// Header of CAN packet
//static volatile uint8_t	can_data[8];						// CAN data


#ifdef __cplusplus
	}
#endif

#endif /* __GBL__ */
